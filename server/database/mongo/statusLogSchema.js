/**
 * @file Mongoose schema definition for Character Status Logs.
 * @module server/database/mongo/statusLogSchema
 * @description Defines the structure for status log documents in MongoDB,
 *   linked to a Character document, storing a history of events.
 */

import mongoose from 'mongoose';

/**
 * Defines the structure for individual status log entries stored as
 * subdocuments within the main StatusLog document.
 *
 * @typedef {object} StatusLogEntrySubdocument
 * @property {Date} timestamp - Timestamp of the log entry. Defaults to the
 *   time of creation.
 * @property {string} statusType - Type of status event recorded. Must be one
 *   of the allowed enum values. Required.
 * @property {string} [details] - Optional additional textual details about
 *   the specific event.
 */

/**
 * Mongoose schema representing the collection of status logs for a character.
 * Each document contains the character's ID and an array of log entries.
 *
 * @typedef {object} StatusLogSchema
 * @property {mongoose.Schema.Types.ObjectId} characterId - Reference to the
 *   owning Character document. This field is required, must be unique across
 *   status log documents, and is indexed for efficient lookup.
 * @property {StatusLogEntrySubdocument[]} entries - An array holding the
 *   individual status log entries for the character.
 * @property {Date} createdAt - Timestamp automatically generated by Mongoose
 *   when the document is first created.
 * @property {Date} updatedAt - Timestamp automatically updated by Mongoose
 *   whenever the document is modified.
 */
export const statusLogSchema = new mongoose.Schema(
  {
    /**
     * Reference to the owning Character document. Links this log collection
     * back to the specific character it belongs to.
     * @type {object}
     * @ref Character
     * @required
     * @index
     */
    characterId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Character',
      required: true,
      index: true,
    },
    /**
     * Array of status log entries, capturing the history of events for the
     * character. Each element conforms to the StatusLogEntrySubdocument
     * structure.
     * @type {Array}
     */
    entries: [
      {
        /**
         * Timestamp indicating when this specific log entry was created.
         * @type {Date}
         * @default Date.now
         */
        timestamp: {
          type: Date,
          default: Date.now,
        },
        /**
         * Categorizes the type of status event being logged. Helps in
         * filtering and understanding the nature of the log entry.
         * @type {string}
         * @enum {string[]} ['connected', 'disconnected', 'announcement',
         *   'achievement', 'milestone', 'event', 'purchase', 'sale'] - The
         *   allowed types for status events.
         * @required
         */
        statusType: {
          type: String,
          enum: [
            'connected',
            'disconnected',
            'announcement',
            'achievement',
            'milestone',
            'event',
            'purchase',
            'sale',
          ],
          required: true,
        },
        /**
         * Optional field to provide more context or specific information
         * about the event beyond its type. Can store item names for
         * purchase/sale, achievement names, etc.
         * @type {string}
         */
        details: {
          type: String,
        },
      },
    ],
  },
  {
    timestamps: true, // Adds createdAt and updatedAt timestamps
  }
);

/**
 * Mongoose middleware (pre-save hook). Automatically adds an initial
 * 'connected' log entry when a new StatusLog document is created and saved
 * for the first time, provided it doesn't already have entries. This ensures
 * that the creation/connection event is always recorded.
 *
 * @function preSaveHook
 * @param {Function} next - Mongoose middleware callback to proceed with the
 *   save operation or pass an error.
 * @listens StatusLog.save - This hook triggers before a 'save' operation
 *   on StatusLog documents.
 */
statusLogSchema.pre('save', function (next) {
  if (this.isNew && this.entries.length === 0) {
    try {
      console.debug({
        timestamp: new Date().toISOString(),
        service: 'statusLogSchema.pre.save',
        message: 'Adding initial "connected" log entry...',
        context: { characterId: this.characterId },
      });
      this.entries.push({
        statusType: 'connected',
        timestamp: new Date(),
        details: 'Initial connection',
      });
      console.debug({
        timestamp: new Date().toISOString(),
        service: 'statusLogSchema.pre.save',
        message: 'Initial "connected" log entry added successfully.',
        context: { characterId: this.characterId },
      });
    } catch (error) {
      console.error({
        timestamp: new Date().toISOString(),
        service: 'statusLogSchema.pre.save',
        message: 'Error adding initial "connected" log entry.',
        context: {
          characterId: this.characterId,
          error: error.message,
          stack: error.stack,
        },
      });
      // Pass error to Mongoose to prevent saving
      return next(error);
    }
  }
  next();
});

// TODO: Consider adding pre-save hook for validation or pre-remove for
// cascading if needed.

/**
 * Mongoose model compiled from the statusLogSchema. Provides an interface
 * for interacting with the 'StatusLog' collection in MongoDB, allowing for
 * creation, querying, updating, and deletion of status log documents.
 *
 * @type {object}
 */
export default mongoose.model('StatusLog', statusLogSchema);
